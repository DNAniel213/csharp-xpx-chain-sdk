// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct MetadataModificationBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MetadataModificationBuffer GetRootAsMetadataModificationBuffer(ByteBuffer _bb) { return GetRootAsMetadataModificationBuffer(_bb, new MetadataModificationBuffer()); }
  public static MetadataModificationBuffer GetRootAsMetadataModificationBuffer(ByteBuffer _bb, MetadataModificationBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MetadataModificationBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte ModificationType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte KeySize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte ValueSize(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValueSizeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueSizeBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetValueSizeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetValueSizeArray() { return __p.__vector_as_array<byte>(10); }
  public byte Key(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int KeyLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(12); }
  public byte Value(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValueLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<MetadataModificationBuffer> CreateMetadataModificationBuffer(FlatBufferBuilder builder,
      uint size = 0,
      byte modificationType = 0,
      byte keySize = 0,
      VectorOffset valueSizeOffset = default(VectorOffset),
      VectorOffset keyOffset = default(VectorOffset),
      VectorOffset valueOffset = default(VectorOffset)) {
    builder.StartObject(6);
    MetadataModificationBuffer.AddValue(builder, valueOffset);
    MetadataModificationBuffer.AddKey(builder, keyOffset);
    MetadataModificationBuffer.AddValueSize(builder, valueSizeOffset);
    MetadataModificationBuffer.AddSize(builder, size);
    MetadataModificationBuffer.AddKeySize(builder, keySize);
    MetadataModificationBuffer.AddModificationType(builder, modificationType);
    return MetadataModificationBuffer.EndMetadataModificationBuffer(builder);
  }

  public static void StartMetadataModificationBuffer(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  public static void AddModificationType(FlatBufferBuilder builder, byte modificationType) { builder.AddByte(1, modificationType, 0); }
  public static void AddKeySize(FlatBufferBuilder builder, byte keySize) { builder.AddByte(2, keySize, 0); }
  public static void AddValueSize(FlatBufferBuilder builder, VectorOffset valueSizeOffset) { builder.AddOffset(3, valueSizeOffset.Value, 0); }
  public static VectorOffset CreateValueSizeVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueSizeVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValueSizeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddKey(FlatBufferBuilder builder, VectorOffset keyOffset) { builder.AddOffset(4, keyOffset.Value, 0); }
  public static VectorOffset CreateKeyVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKeyVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(5, valueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<MetadataModificationBuffer> EndMetadataModificationBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MetadataModificationBuffer>(o);
  }
};


}
