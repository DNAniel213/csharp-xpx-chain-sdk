// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct CatapultConfigTransactionBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CatapultConfigTransactionBuffer GetRootAsCatapultConfigTransactionBuffer(ByteBuffer _bb) { return GetRootAsCatapultConfigTransactionBuffer(_bb, new CatapultConfigTransactionBuffer()); }
  public static CatapultConfigTransactionBuffer GetRootAsCatapultConfigTransactionBuffer(ByteBuffer _bb, CatapultConfigTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CatapultConfigTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignatureBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSignatureArray() { return __p.__vector_as_array<byte>(6); }
  public byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignerBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSignerArray() { return __p.__vector_as_array<byte>(8); }
  public uint Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

        internal static object CreateMaxFeeVector(FlatBufferBuilder builder, object p)
        {
            throw new NotImplementedException();
        }

        public uint MaxFee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int MaxFeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaxFeeBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetMaxFeeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public uint[] GetMaxFeeArray() { return __p.__vector_as_array<uint>(14); }
  public uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeadlineBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public uint[] GetDeadlineArray() { return __p.__vector_as_array<uint>(16); }
  public uint ApplyHeightDelta(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ApplyHeightDeltaLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApplyHeightDeltaBytes() { return __p.__vector_as_span(18); }
#else
  public ArraySegment<byte>? GetApplyHeightDeltaBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public uint[] GetApplyHeightDeltaArray() { return __p.__vector_as_array<uint>(18); }
  public ushort BlockChainConfigSize { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort SupportedEntityVersionsSize { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte BlockChainConfig(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BlockChainConfigLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlockChainConfigBytes() { return __p.__vector_as_span(24); }
#else
  public ArraySegment<byte>? GetBlockChainConfigBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetBlockChainConfigArray() { return __p.__vector_as_array<byte>(24); }
  public byte SupportedEntityVersions(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SupportedEntityVersionsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSupportedEntityVersionsBytes() { return __p.__vector_as_span(26); }
#else
  public ArraySegment<byte>? GetSupportedEntityVersionsBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSupportedEntityVersionsArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<CatapultConfigTransactionBuffer> CreateCatapultConfigTransactionBuffer(FlatBufferBuilder builder,
      uint size = 0,
      VectorOffset signatureOffset = default(VectorOffset),
      VectorOffset signerOffset = default(VectorOffset),
      uint version = 0,
      ushort type = 0,
      VectorOffset maxFeeOffset = default(VectorOffset),
      VectorOffset deadlineOffset = default(VectorOffset),
      VectorOffset applyHeightDeltaOffset = default(VectorOffset),
      ushort blockChainConfigSize = 0,
      ushort supportedEntityVersionsSize = 0,
      VectorOffset blockChainConfigOffset = default(VectorOffset),
      VectorOffset supportedEntityVersionsOffset = default(VectorOffset)) {
    builder.StartObject(12);
    CatapultConfigTransactionBuffer.AddSupportedEntityVersions(builder, supportedEntityVersionsOffset);
    CatapultConfigTransactionBuffer.AddBlockChainConfig(builder, blockChainConfigOffset);
    CatapultConfigTransactionBuffer.AddApplyHeightDelta(builder, applyHeightDeltaOffset);
    CatapultConfigTransactionBuffer.AddDeadline(builder, deadlineOffset);
    CatapultConfigTransactionBuffer.AddMaxFee(builder, maxFeeOffset);
    CatapultConfigTransactionBuffer.AddVersion(builder, version);
    CatapultConfigTransactionBuffer.AddSigner(builder, signerOffset);
    CatapultConfigTransactionBuffer.AddSignature(builder, signatureOffset);
    CatapultConfigTransactionBuffer.AddSize(builder, size);
    CatapultConfigTransactionBuffer.AddSupportedEntityVersionsSize(builder, supportedEntityVersionsSize);
    CatapultConfigTransactionBuffer.AddBlockChainConfigSize(builder, blockChainConfigSize);
    CatapultConfigTransactionBuffer.AddType(builder, type);
    return CatapultConfigTransactionBuffer.EndCatapultConfigTransactionBuffer(builder);
  }

  public static void StartCatapultConfigTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
  public static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
  public static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSignatureVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
  public static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSignerVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(3, version, 0); }
  public static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
  public static void AddMaxFee(FlatBufferBuilder builder, VectorOffset maxFeeOffset) { builder.AddOffset(5, maxFeeOffset.Value, 0); }
  public static VectorOffset CreateMaxFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMaxFeeVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMaxFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
  public static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDeadlineVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddApplyHeightDelta(FlatBufferBuilder builder, VectorOffset applyHeightDeltaOffset) { builder.AddOffset(7, applyHeightDeltaOffset.Value, 0); }
  public static VectorOffset CreateApplyHeightDeltaVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateApplyHeightDeltaVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartApplyHeightDeltaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlockChainConfigSize(FlatBufferBuilder builder, ushort blockChainConfigSize) { builder.AddUshort(8, blockChainConfigSize, 0); }
  public static void AddSupportedEntityVersionsSize(FlatBufferBuilder builder, ushort supportedEntityVersionsSize) { builder.AddUshort(9, supportedEntityVersionsSize, 0); }
  public static void AddBlockChainConfig(FlatBufferBuilder builder, VectorOffset blockChainConfigOffset) { builder.AddOffset(10, blockChainConfigOffset.Value, 0); }
  public static VectorOffset CreateBlockChainConfigVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBlockChainConfigVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartBlockChainConfigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSupportedEntityVersions(FlatBufferBuilder builder, VectorOffset supportedEntityVersionsOffset) { builder.AddOffset(11, supportedEntityVersionsOffset.Value, 0); }
  public static VectorOffset CreateSupportedEntityVersionsVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSupportedEntityVersionsVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartSupportedEntityVersionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<CatapultConfigTransactionBuffer> EndCatapultConfigTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CatapultConfigTransactionBuffer>(o);
  }
  public static void FinishCatapultConfigTransactionBufferBuffer(FlatBufferBuilder builder, Offset<CatapultConfigTransactionBuffer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCatapultConfigTransactionBufferBuffer(FlatBufferBuilder builder, Offset<CatapultConfigTransactionBuffer> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
