// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct RemoveExchangeOfferBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RemoveExchangeOfferBuffer GetRootAsRemoveExchangeOfferBuffer(ByteBuffer _bb) { return GetRootAsRemoveExchangeOfferBuffer(_bb, new RemoveExchangeOfferBuffer()); }
  public static RemoveExchangeOfferBuffer GetRootAsRemoveExchangeOfferBuffer(ByteBuffer _bb, RemoveExchangeOfferBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RemoveExchangeOfferBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint MosaicId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int MosaicIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMosaicIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetMosaicIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetMosaicIdArray() { return __p.__vector_as_array<uint>(4); }
  public byte Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<RemoveExchangeOfferBuffer> CreateRemoveExchangeOfferBuffer(FlatBufferBuilder builder,
      VectorOffset mosaicIdOffset = default(VectorOffset),
      byte type = 0) {
    builder.StartObject(2);
    RemoveExchangeOfferBuffer.AddMosaicId(builder, mosaicIdOffset);
    RemoveExchangeOfferBuffer.AddType(builder, type);
    return RemoveExchangeOfferBuffer.EndRemoveExchangeOfferBuffer(builder);
  }

  public static void StartRemoveExchangeOfferBuffer(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMosaicId(FlatBufferBuilder builder, VectorOffset mosaicIdOffset) { builder.AddOffset(0, mosaicIdOffset.Value, 0); }
  public static VectorOffset CreateMosaicIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMosaicIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMosaicIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, byte type) { builder.AddByte(1, type, 0); }
  public static Offset<RemoveExchangeOfferBuffer> EndRemoveExchangeOfferBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RemoveExchangeOfferBuffer>(o);
  }
};


}
