// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct MosaicProperty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MosaicProperty GetRootAsMosaicProperty(ByteBuffer _bb) { return GetRootAsMosaicProperty(_bb, new MosaicProperty()); }
  public static MosaicProperty GetRootAsMosaicProperty(ByteBuffer _bb, MosaicProperty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MosaicProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte MosaicPropertyId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public uint Value(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetValueArray() { return __p.__vector_as_array<uint>(6); }

  public static Offset<MosaicProperty> CreateMosaicProperty(FlatBufferBuilder builder,
      byte mosaicPropertyId = 0,
      VectorOffset valueOffset = default(VectorOffset)) {
    builder.StartObject(2);
    MosaicProperty.AddValue(builder, valueOffset);
    MosaicProperty.AddMosaicPropertyId(builder, mosaicPropertyId);
    return MosaicProperty.EndMosaicProperty(builder);
  }

  public static void StartMosaicProperty(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMosaicPropertyId(FlatBufferBuilder builder, byte mosaicPropertyId) { builder.AddByte(0, mosaicPropertyId, 0); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MosaicProperty> EndMosaicProperty(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MosaicProperty>(o);
  }
};


}
