// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct PropertyModificationBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PropertyModificationBuffer GetRootAsPropertyModificationBuffer(ByteBuffer _bb) { return GetRootAsPropertyModificationBuffer(_bb, new PropertyModificationBuffer()); }
  public static PropertyModificationBuffer GetRootAsPropertyModificationBuffer(ByteBuffer _bb, PropertyModificationBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PropertyModificationBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte ModificationType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  /// In case of address it is 25 bytes array. In case of mosaic it is 8 byte array(or 2 uint32 array).
  /// In case of transaction it is 2 byte array(ushort)
  public byte Value(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<PropertyModificationBuffer> CreatePropertyModificationBuffer(FlatBufferBuilder builder,
      byte modificationType = 0,
      VectorOffset valueOffset = default(VectorOffset)) {
    builder.StartObject(2);
    PropertyModificationBuffer.AddValue(builder, valueOffset);
    PropertyModificationBuffer.AddModificationType(builder, modificationType);
    return PropertyModificationBuffer.EndPropertyModificationBuffer(builder);
  }

  public static void StartPropertyModificationBuffer(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddModificationType(FlatBufferBuilder builder, byte modificationType) { builder.AddByte(0, modificationType, 0); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PropertyModificationBuffer> EndPropertyModificationBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PropertyModificationBuffer>(o);
  }
};


}
